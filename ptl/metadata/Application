{
    "type": "Ext.app.Application",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "models": [
            "CusInv",
            "PTcMst",
            "PGrMst",
            "PSbMst",
            "PSzMst",
            "SlsPrdOpt",
            "CusInvT3",
            "CusInvT4",
            "AcMDiv",
            "AcMSeg",
            "AcMMgr",
            "AcMRgn",
            "CusInvT6",
            "UsrInf"
        ],
        "stores": [
            "CusInvT1",
            "CusInvT2",
            "CusInvT3",
            "CusInvT4",
            "CusInvT6",
            "PTcMst",
            "PGrMst",
            "PSbMst",
            "PSzMst",
            "AcMDiv",
            "AcMSeg",
            "AcMRgn",
            "AcMMgr",
            "UsrInf"
        ],
        "views": [
            "BsePnl",
            "UsrSnI",
            "AutErr"
        ],
        "controllers": [
            "PtlCtl",
            "SlsQdrCtl",
            "SlsPrdCtl",
            "UsrAutCtl"
        ],
        "name": "Ptl"
    },
    "designerId": "application",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "var Sto = Ext.data.StoreManager.lookup('UsrInf'); \r",
                    "var Rcd;\r",
                    "var UsrCrl;\r",
                    "\r",
                    "Ext.getDoc().dom.title = 'Huhtamaki BI Portal'; \r",
                    "var BsePnl = Ext.create('Ptl.view.BsePnl', {\r",
                    "    renderTo: Ext.getBody()\r",
                    "});\r",
                    "BsePnl.show();\r",
                    "BsePnl.down('panel').hide();\r",
                    "BsePnl.down('toolbar').hide();\r",
                    "\r",
                    "Sto.load();\r",
                    "Rcd = Sto.first();\r",
                    "if (Rcd) {\r",
                    "    UsrCrl = Rcd.get('UsrCrl');\r",
                    "}\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "    scope: this,\r",
                    "    url: '../shared/ChkCrl.php',\r",
                    "    method: 'post',\r",
                    "    params: {\r",
                    "        UsrNme: '',\r",
                    "        Pwd: '',\r",
                    "        UsrCrl: UsrCrl\r",
                    "    },    \r",
                    "    success: function(RspJSN){\r",
                    "        Rsp = Ext.JSON.decode(RspJSN.responseText);\r",
                    "        if (Rsp.success === true) {\r",
                    "            Ptl.getApplication().getController('UsrAutCtl').ChkAut(Rsp.UsrNme,UsrCrl);\r",
                    "        }\r",
                    "        else {\r",
                    "            var UsrSnI = Ext.create('Ptl.view.UsrSnI', {\r",
                    "                renderTo: Ext.getBody()\r",
                    "            });\r",
                    "\r",
                    "            UsrSnI.show();\r",
                    "        }\r",
                    "    },\r",
                    "    failure: function(){\r",
                    "        console.log('Load Error-php');\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "537e0b51-e6ea-4241-87a5-aa7149b9492a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "ChtAxsOvr",
                "implHandler": [
                    "var Apl = this,\r",
                    "    Ctl;\r",
                    "\r",
                    "Ext.chart.axis.Axis.override({\r",
                    "    getOrCreateLabel: function (i, text) {\r",
                    "        var me = this,\r",
                    "            labelGroup = me.labelGroup,\r",
                    "            textLabel = labelGroup.getAt(i),\r",
                    "            surface = me.chart.surface;\r",
                    "\r",
                    "        if (textLabel) {\r",
                    "            if (text != textLabel.attr.text) {\r",
                    "                textLabel.setAttributes(Ext.apply({\r",
                    "                    text: text\r",
                    "                }, me.label), true);\r",
                    "                textLabel._bbox = textLabel.getBBox();\r",
                    "            }\r",
                    "        }\r",
                    "        else {\r",
                    "            textLabel = surface.add(Ext.apply({\r",
                    "                group: labelGroup,\r",
                    "                type: 'text',\r",
                    "                x: 0,\r",
                    "                y: 0,\r",
                    "                text: text\r",
                    "            }, me.label));\r",
                    "            surface.renderItem(textLabel);\r",
                    "            textLabel._bbox = textLabel.getBBox();\r",
                    "\r",
                    "            if (me.type == 'Category') {\r",
                    "                if (me.chart.id == 'SlsQdr') {\r",
                    "                    Ctl = Apl.getController('SlsQdrCtl');\r",
                    "                    textLabel.on('mouseover', Ctl.PrsAxsEvt); \r",
                    "                    textLabel.on('mouseout', Ctl.PrsAxsEvt); \r",
                    "                    textLabel.on('click', Ctl.PrsAxsEvt);\r",
                    "                }\r",
                    "                //                else if (me.chart.id == 'SlsPrd') {\r",
                    "                //                    Ctl = Apl.getController('SlsPrdCtl');\r",
                    "                //                }\r",
                    "\r",
                    "            }\r",
                    "        }\r",
                    "        //get untransformed bounding box\r",
                    "        if (me.label.rotation) {\r",
                    "            textLabel.setAttributes({\r",
                    "                rotation: {\r",
                    "                    degrees: 0\r",
                    "                }\r",
                    "            }, true);\r",
                    "            textLabel._ubbox = textLabel.getBBox();\r",
                    "            textLabel.setAttributes(me.label, true);\r",
                    "        } else {\r",
                    "            textLabel._ubbox = textLabel._bbox;\r",
                    "        }\r",
                    "        return textLabel;\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "a6fe7a80-b72c-4525-8183-458eb492e4c8"
        }
    ]
}