/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

//@require @packageOverrides
Ext.Loader.setConfig({
    enabled: true
});

Ext.application({
    models: [
        'CusInv',
        'PTcMst',
        'PGrMst',
        'PSbMst',
        'PSzMst',
        'SlsPrdOpt',
        'CusInvT3',
        'CusInvT4',
        'AcMDiv',
        'AcMSeg',
        'AcMMgr',
        'AcMRgn',
        'CusInvT6',
        'UsrInf'
    ],
    stores: [
        'CusInvT1',
        'CusInvT2',
        'CusInvT3',
        'CusInvT4',
        'CusInvT6',
        'PTcMst',
        'PGrMst',
        'PSbMst',
        'PSzMst',
        'AcMDiv',
        'AcMSeg',
        'AcMRgn',
        'AcMMgr',
        'UsrInf'
    ],
    views: [
        'BsePnl',
        'UsrSnI',
        'AutErr'
    ],
    controllers: [
        'PtlCtl',
        'SlsQdrCtl',
        'SlsPrdCtl',
        'UsrAutCtl'
    ],
    name: 'Ptl',

    launch: function() {
        var Sto = Ext.data.StoreManager.lookup('UsrInf'); 
        var Rcd;
        var UsrCrl;

        Ext.getDoc().dom.title = 'Huhtamaki BI Portal'; 
        var BsePnl = Ext.create('Ptl.view.BsePnl', {
            renderTo: Ext.getBody()
        });
        BsePnl.show();
        BsePnl.down('panel').hide();
        BsePnl.down('toolbar').hide();

        Sto.load();
        Rcd = Sto.first();
        if (Rcd) {
            UsrCrl = Rcd.get('UsrCrl');
        }

        Ext.Ajax.request({
            scope: this,
            url: '../shared/ChkCrl.php',
            method: 'post',
            params: {
                UsrNme: '',
                Pwd: '',
                UsrCrl: UsrCrl
            },    
            success: function(RspJSN){
                Rsp = Ext.JSON.decode(RspJSN.responseText);
                if (Rsp.success === true) {
                    Ptl.getApplication().getController('UsrAutCtl').ChkAut(Rsp.UsrNme,UsrCrl);
                }
                else {
                    var UsrSnI = Ext.create('Ptl.view.UsrSnI', {
                        renderTo: Ext.getBody()
                    });

                    UsrSnI.show();
                }
            },
            failure: function(){
                console.log('Load Error-php');
            }
        });
    },

    ChtAxsOvr: function() {
        var Apl = this,
            Ctl;

        Ext.chart.axis.Axis.override({
            getOrCreateLabel: function (i, text) {
                var me = this,
                    labelGroup = me.labelGroup,
                    textLabel = labelGroup.getAt(i),
                    surface = me.chart.surface;

                if (textLabel) {
                    if (text != textLabel.attr.text) {
                        textLabel.setAttributes(Ext.apply({
                            text: text
                        }, me.label), true);
                        textLabel._bbox = textLabel.getBBox();
                    }
                }
                else {
                    textLabel = surface.add(Ext.apply({
                        group: labelGroup,
                        type: 'text',
                        x: 0,
                        y: 0,
                        text: text
                    }, me.label));
                    surface.renderItem(textLabel);
                    textLabel._bbox = textLabel.getBBox();

                    if (me.type == 'Category') {
                        if (me.chart.id == 'SlsQdr') {
                            Ctl = Apl.getController('SlsQdrCtl');
                            textLabel.on('mouseover', Ctl.PrsAxsEvt); 
                            textLabel.on('mouseout', Ctl.PrsAxsEvt); 
                            textLabel.on('click', Ctl.PrsAxsEvt);
                        }
                        //                else if (me.chart.id == 'SlsPrd') {
                        //                    Ctl = Apl.getController('SlsPrdCtl');
                        //                }

                    }
                }
                //get untransformed bounding box
                if (me.label.rotation) {
                    textLabel.setAttributes({
                        rotation: {
                            degrees: 0
                        }
                    }, true);
                    textLabel._ubbox = textLabel.getBBox();
                    textLabel.setAttributes(me.label, true);
                } else {
                    textLabel._ubbox = textLabel._bbox;
                }
                return textLabel;
            }
        });
    }

});
